trigger: none

pool:
  vmImage: ubuntu-latest
  
variables:
  sshKey: 'vm-cloudwalker_key.pem' 

stages:
- stage: tfvalidate
  jobs:
  - job: validate 
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-upgrade'
        backendServiceArm: 'sp-terraform-Schulung'
        backendAzureRmResourceGroupName: 'rg-aschmidt-cloudwalker'
        backendAzureRmStorageAccountName: 'stacloudwalkerterraform'
        backendAzureRmContainerName: 'c-cloudwalker-terraform'
        backendAzureRmKey: 'prod.terraform.tfstate'
    - task: TerraformTaskV4@4
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
- stage: tfdeploy
  condition: succeeded('tfvalidate')
  dependsOn: tfvalidate
  jobs:
  - job: apply
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-upgrade'
        backendServiceArm: 'sp-terraform-Schulung'
        backendAzureRmResourceGroupName: 'rg-aschmidt-cloudwalker'
        backendAzureRmStorageAccountName: 'stacloudwalkerterraform'
        backendAzureRmContainerName: 'c-cloudwalker-terraform'
        backendAzureRmKey: 'prod.terraform.tfstate'
    - task: TerraformTaskV4@4
      displayName: 'terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: -out main.tfplan
        environmentServiceNameAzureRM: 'sp-terraform-Schulung'
    - task: TerraformTaskV4@4
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'main.tfplan'
        environmentServiceNameAzureRM: 'sp-terraform-Schulung'
    - script: terraform output key_data
      displayName: 'print ssh key_data'

  - stage: deploy
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy on VM'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 
      name: 'environment-aschmidt-cloudwalker'
      resourceName: vm-cloudwalker
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
        # den SSH-Schl√ºssel herunterladen
          - task: DownloadSecureFile@1
            name: sshKey
            inputs:
              secureFile: $(sshKey)
          - script: |
              mkdir -p $(Agent.TempDirectory)/.ssh
              cp $(sshKey.secureFilePath) $(Agent.TempDirectory)/.ssh/vm-cloudwalker_key.pem
              chmod 600 $(Agent.TempDirectory)/.ssh/vm-cloudwalker_key.pem
            displayName: 'setup ssh-key'
          # Pipeline artifact auf Azure VM kopieren
          - script: scp -i $(Agent.TempDirectory)/.ssh/vm-cloudwalker_key.pem -r $(Pipeline.Workspace)/Test-Driven-Development/s/* azureuser@4.184.201.242:cloudwalker/goat-book
            displayName: 'copy repository to azure vm'
