trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  sshKey : 'cw-terraform'

stages:
- stage: tfvalidate
  jobs:
  - job: validate 
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-upgrade'
        backendServiceArm: 'sp-terraform-Schulung'
        backendAzureRmResourceGroupName: 'rg-aschmidt-cloudwalker'
        backendAzureRmStorageAccountName: 'stacloudwalkerterraform'
        backendAzureRmContainerName: 'c-cloudwalker-terraform'
        backendAzureRmKey: 'prod.terraform.tfstate'
    - task: TerraformTaskV4@4
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'

    - script: ls $(System.DefaultWorkingDirectory)
      displayName: 'workingdirectory'
    - task: PublishPipelineArtifact@1
      displayName: 'publish artifacts'
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/goat-book
        artifact: 'Test-Driven-Development'
        publishLocation: 'pipeline'
      
- stage: tfdeploy
  condition: succeeded('tfvalidate')
  dependsOn: tfvalidate
  jobs:
  - job: apply
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-upgrade'
        backendServiceArm: 'sp-terraform-Schulung'
        backendAzureRmResourceGroupName: 'rg-aschmidt-cloudwalker'
        backendAzureRmStorageAccountName: 'stacloudwalkerterraform'
        backendAzureRmContainerName: 'c-cloudwalker-terraform'
        backendAzureRmKey: 'prod.terraform.tfstate'
    - task: TerraformTaskV4@4
      displayName: 'terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: -out main.tfplan
        environmentServiceNameAzureRM: 'sp-terraform-Schulung'
    - task: TerraformTaskV4@4
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'main.tfplan'
        environmentServiceNameAzureRM: 'sp-terraform-Schulung'

- stage: deploy
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy on VM'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 
      name: 'environment-aschmidt-cloudwalker-terraform'
      resourceName: hostname
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

# den SSH-Schl√ºssel herunterladen
          - task: DownloadSecureFile@1
            name: sshKey
            inputs:
              secureFile: $(sshKey)
          - script: |
              mkdir -p $(Agent.TempDirectory)/.ssh
              cp $(sshKey.secureFilePath) $(Agent.TempDirectory)/.ssh/$(sshKey)
              chmod 600 $(Agent.TempDirectory)/.ssh/$(sshKey)
            displayName: 'setup ssh-key'
          # Pipeline artifact auf Azure VM kopieren
          - script: scp -i $(Agent.TempDirectory)/.ssh/$(sshKey) -r $(Pipeline.Workspace)/Test-Driven-Development/s/* azureuser@4.184.201.242:cloudwalker
            displayName: 'copy repository to azure vm'
              